import whisper
import os
from pydub import AudioSegment

# Carrega o modelo Whisper. 'base' √© recomendado agora que o servidor est√° est√°vel.
try:
    print("üß† Carregando o modelo Whisper (modelo: base)...")
    model = whisper.load_model("base")
    print("‚úÖ Modelo Whisper carregado com sucesso.")
except Exception as e:
    print(f"‚ùå Erro cr√≠tico ao carregar o modelo Whisper: {e}")
    model = None

def transcrever_audio_para_texto(caminho_do_audio):
    """
    Recebe o caminho de um ficheiro de √°udio, converte para o formato ideal
    e retorna o texto transcrito usando Whisper.
    """
    if not model:
        return "[Erro: O modelo de transcri√ß√£o n√£o p√¥de ser carregado no servidor.]"

    caminho_audio_convertido = ""
    try:
        # --- ETAPA DE OTIMIZA√á√ÉO ---
        print(f"üîä Otimizando o √°udio: {caminho_do_audio}")
        # Carrega o √°udio original
        audio = AudioSegment.from_file(caminho_do_audio)
        # Converte para mono e define a taxa de amostragem para 16kHz
        audio = audio.set_channels(1).set_frame_rate(16000)
        
        # Cria um novo nome de arquivo para o √°udio otimizado
        caminho_audio_convertido = caminho_do_audio.replace('.m4a', '_optimized.wav')
        
        # Exporta o √°udio otimizado em formato WAV
        audio.export(caminho_audio_convertido, format="wav")
        print(f"‚úÖ √Åudio otimizado salvo em: {caminho_audio_convertido}")
        # --- FIM DA OTIMIZA√á√ÉO ---

        print(f"üé§ A iniciar transcri√ß√£o com Whisper para: {caminho_audio_convertido}")
        
        # Passa o arquivo OTIMIZADO para o Whisper
        result = model.transcribe(caminho_audio_convertido, language="pt", fp16=False)
        
        texto_final = result.get("text", "").strip()

        if texto_final:
            print(f"‚úÖ Transcri√ß√£o conclu√≠da: '{texto_final}'")
        else:
            print("‚ö†Ô∏è A transcri√ß√£o n√£o produziu texto.")
            texto_final = "[N√£o foi poss√≠vel detetar fala no √°udio.]"
        
        return texto_final

    except Exception as e:
        print(f"‚ùå Erro durante a transcri√ß√£o com Whisper: {e}")
        return f"[Erro no processo de transcri√ß√£o: {e}]"
    finally:
        # Remove ambos os arquivos de √°udio (original e otimizado)
        if os.path.exists(caminho_do_audio):
            os.remove(caminho_do_audio)
        if caminho_audio_convertido and os.path.exists(caminho_audio_convertido):
            os.remove(caminho_audio_convertido)
        print("üóëÔ∏è Ficheiros de √°udio tempor√°rios removidos.")